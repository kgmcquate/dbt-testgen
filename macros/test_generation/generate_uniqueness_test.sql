{% macro query_to_list(query) %}
    {% set query_to_process %}
        {{ query }}
    {% endset %}

    {% set results = run_query(query_to_process) %}

    {% if execute %}
    {% set results_list = results.rows %}
    {% else %}
    {% set results_list = [] %}
    {% endif %}

    {{ return(results_list) }}

{% endmacro %}


{% macro get_uniqueness_test_suggestions(
        schema_name,
        table_name,
        tags = ["uniqueness"],
        compound_key_length = 1,
        dbt_config = None
    ) 
%}
    {# kwargs is used for test configurations #}
    {% set test_config = kwargs %}
    {% do test_config.update({"tags": tags}) %}

    {% if dbt_config == None %}
        {% set dbt_config = {"models": []} %}
    {% endif %}

    {{ print(dbt_config) }}

    {% set table_relation = api.Relation.create(
        database = target.database,
        schema = schema_name,
        identifier = table_name
    ) %}

    {% set count_distinct_exprs = [] %}

    {% set columns = adapter.get_columns_in_relation(table_relation) %}

    {% set src_table = source(schema_name, table_name) %}

    {% for column in columns %}
        {% do count_distinct_exprs.append(
            "SELECT '" ~ column.name ~ "' AS colname, COUNT(DISTINCT " ~ column.name ~ ") AS cardinality FROM " ~ src_table
        ) %}
    {% endfor %}

    {% set count_distinct_sql %}
        {{ count_distinct_exprs | join("\nUNION ALL\n") }}
    {% endset %}

    {% set count_sql %}
        {{ "SELECT count(1) AS table_count FROM " ~ src_table }} 
    {% endset%}

    {% if execute %}

        {{ print(count_distinct_sql) }}

        {% set table_count = query_to_list(count_sql)[0].table_count %}

        {% set results = query_to_list(count_distinct_sql) %}

        {% set unique_keys = [] %}
        {% for cardinality_result in results %}
            {% if cardinality_result.cardinality == table_count %}
                {% do unique_keys.append(cardinality_result.colname) %}
            {% endif %}
        {% endfor %}

        {{ print(col_test_config) }}

        {% set columns_list = [] %}

        {% for unique_key in unique_keys %}
            {% do columns_list.append({
                "name": unique_key,
                "description": "Uniqueness test generated by dbt-testgen",
                "tests": [
                    {   
                        "unique": test_config
                    },
                    {
                        "not_null": test_config
                    }
                ]
            }) %}
        {% endfor %}

        {% do dbt_config["models"].append({"name": table_name, "columns": columns_list}) %}

        {% do return(dbt_config) %}

    {% endif %}

{% endmacro %}


{% macro print_uniqueness_test_suggestions(        
        schema_name,
        table_name,
        tags = ["uniqueness"],
        dbt_config = None
    ) 
%}
    {# kwargs is used for test configurations #}
    {% set test_config = kwargs %}

    {% set tests = get_uniqueness_test_suggestions(schema_name, table_name, tags, **test_config) %} 

    {{ print(toyaml(tests)) }}

{% endmacro %}
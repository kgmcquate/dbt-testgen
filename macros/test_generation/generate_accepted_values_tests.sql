{% macro array_agg(colname) %}
     {{ return(adapter.dispatch('array_agg', 'testgen')(colname)) }}
{% endmacro %}

{% macro default__array_agg(colname) %}
    {{ return("array_agg(" ~ colname ~ "::VARCHAR)") }}
{% endmacro %}



{% macro get_accepted_values_test_suggestions(
        table_relation,
        sample = false,
        limit = None,
        is_source = false,
        exclude_types = ["float"],
        exclude_cols = [],
        tags = ["accepted_values"],
        max_cardinality = 5,
        dbt_config = None
    ) %}
    {# Run macro for the specific target DB #}
    {% if execute %}
        {{ return(adapter.dispatch('get_accepted_values_test_suggestions', 'testgen')(table_relation, sample, limit, is_source, exclude_types, exclude_cols, tags, max_cardinality, **kwargs)) }}
    {% endif%}
{%- endmacro %}


{% macro default__get_accepted_values_test_suggestions(
        table_relation,
        sample = false,
        limit = None,
        is_source = false,
        exclude_types = ["float"],
        exclude_cols = [],
        tags = ["accepted_values"],
        max_cardinality = 5,
        dbt_config = None
    ) 
%}
    {{ print(table_relation)}}
    {# kwargs is used for test configurations #}
    {% set test_config = kwargs %}
    {% if tags != None %}
        {% do test_config.update({"tags": tags}) %}
    {% endif %}

    {% if is_source == true %}
        {% set models_or_sources = "sources" %}
    {% else %}
        {% set models_or_sources = "models" %}
    {% endif %}

    {% set columns = adapter.get_columns_in_relation(table_relation) %}
    {% set columns = testgen.exclude_column_types(columns, exclude_types) %}
    {% set columns = testgen.exclude_column_names(columns, exclude_cols) %}

    {% set count_distinct_exprs = [] %}
    {% for column in columns %}
        {% do count_distinct_exprs.append(
            "
            select '" ~ column.column ~ "' AS colname, count(1) as cardinality, " ~ 
            testgen.array_agg(column.column) ~ " AS unique_values 
            from (
                select " ~ column.column ~ "
                from " ~ table_relation ~ "
                group by " ~ column.column ~ "
            ) t1
            "
        ) %}
    {% endfor %}

    {{ print(max_cardinality) }}

    {% set count_distinct_sql %}
        SELECT * FROM (
            {{ count_distinct_exprs | join("\nUNION ALL\n") }}
        ) t2
        WHERE cardinality <= {{ max_cardinality|string }}
    {% endset %}

    {% set cardinality_results = testgen.query_as_list(count_distinct_sql) %}

    {% set column_tests = [] %}
    {% for cardinality_result in cardinality_results %}
        {% do column_tests.append({
                "name": cardinality_result.colname,
                "description": "Accepted values test generated by dbt-testgen",
                "tests": [
                    {"accepted_values": {"values": fromjson(cardinality_result.unique_values)|sort}}
                ]
        }
        ) %}
    {% endfor %}

    {% if dbt_config == None %}
        {% set dbt_config = {models_or_sources: []} %}
    {% endif %}

    {% do dbt_config[models_or_sources].append({"name": table_relation.identifier, "columns": column_tests}) %}

    {% do return(dbt_config) %}

{% endmacro %}

